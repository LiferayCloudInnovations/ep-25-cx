buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.defaults", version: "latest.release"
		classpath group: "org.springframework.boot", name: "spring-boot-gradle-plugin", version: "2.7.18"
	}

	repositories {
		maven {
			url new File(rootProject.projectDir, "../../.m2-tmp")
		}

		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}
}

apply plugin: "com.liferay.source.formatter"
apply plugin: "java-library"
apply plugin: "org.springframework.boot"

dependencies {
	implementation group: "com.liferay", name: "com.liferay.client.extension.util.spring.boot3", version: "latest.release"
	implementation group: "com.liferay", name: "org.apache.commons.logging", version: "1.2.LIFERAY-PATCHED-2"
	implementation group: "net.datafaker", name: "datafaker", version: "1.9.0"
	implementation group: "org.json", name: "json", version: "20231013"
	implementation group: "org.springframework.boot", name: "spring-boot-starter-oauth2-resource-server", version: "2.7.18"
	implementation group: "org.springframework.boot", name: "spring-boot-starter-web", version: "2.7.18"
	implementation group: "org.springframework.boot", name: "spring-boot-starter-webflux", version: "2.7.18"
}

repositories {
	maven {
		url new File(rootProject.projectDir, "../../.m2-tmp")
	}

	maven {
		url "https://repository-cdn.liferay.com/nexus/content/groups/public"
	}
}

def generatedFileName = "cx-values.yaml"
def generatedFilePath = layout.buildDirectory.file("liferay-client-extension-build/${generatedFileName}").get().asFile

tasks.named('createClientExtensionConfig') {
	outputs.file(generatedFilePath)
	doLast {
		generatedFilePath.getParentFile().mkdirs()
		def clientExtensionConfigContent = layout.buildDirectory.file("liferay-client-extension-build/${project.name}.client-extension-config.json").get().asFile.text.replaceAll(/[\r\n]+/, "").trim()

		def valuesYamlContent = """
clientExtensionConfig:
  configJsons:
    - |
      ${clientExtensionConfigContent}
  kind: Deployment
  mainDomain: "${project.name}.localtest.me"
  mountInitConfig: true
  virtualInstanceId: "main.dxp.localtest.me"
image:
  repository: registry:5000/${project.name}
ingress:
    enabled: true
livenessProbe:
    httpGet:
        path: /ready
readinessProbe:
    httpGet:
        path: /ready
service:
    enabled: true
    port: 58081
"""

		generatedFilePath.write(valuesYamlContent)
	}
}